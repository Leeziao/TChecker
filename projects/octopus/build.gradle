// Check gradle version.

def reguiredGradleVersionMajor = 2
def requiredGradleVersionMinor = 0
def (gradleVersionMajor, gradleVersionMinor) =
    getGradle().gradleVersion.tokenize('.').collect {it.toInteger()}

if ( gradleVersionMajor < reguiredGradleVersionMajor ||
        (gradleVersionMajor == reguiredGradleVersionMajor &&
        gradleVersionMinor < requiredGradleVersionMinor))
{
    throw new GradleException("Gradle version " +
            "$reguiredGradleVersionMajor.$requiredGradleVersionMinor and higher required.")
}

apply plugin: 'java'

repositories { mavenCentral() }

configurations {
  runtimeClasspath.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies{

  implementation group: 'commons-cli', name: 'commons-cli', version: '1.2'
  implementation group: 'commons-io', name: 'commons-io', version: '2.5'
  implementation group: 'org.json', name: 'json', version: '20141113'
  implementation group: 'org.apache.ftpserver', name: 'ftpserver', version: '1.0.6'
  implementation "com.sparkjava:spark-core:2.5"
  implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.8'
  implementation group: "com.thinkaurelius.titan", name: "titan-core", version: '1.0.0'
  implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'
  implementation group: 'org.apache.tinkerpop', name: 'gremlin-driver', version: '3.0.1-incubating'
  implementation group: 'com.opencsv', name: 'opencsv', version: '3.5'
  implementation group: 'org.graphstream', name: 'gs-core', version: '1.3'

  runtimeOnly group: 'ch.qos.logback', name: 'logback-core', version: '1.1.3'
  runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'
  runtimeOnly group: "com.thinkaurelius.titan", name: "titan-berkeleyje", version: '1.0.0'
  runtimeOnly group: "com.thinkaurelius.titan", name: "titan-lucene", version: '1.0.0'

}

// Python utilities

task octopusMlutils(type: Exec) {
    workingDir './python/octopus-mlutils'
    commandLine 'python3', 'setup.py', 'install', '--user'
}

task octopusTools(type: Exec, dependsOn: octopusMlutils) {
    workingDir './python/octopus-tools'
    commandLine 'python3', 'setup.py', 'install', '--user'
}

task copyToLib(type: Copy) {
    into "lib"
    from configurations.runtimeClasspath
}

build.dependsOn copyToLib
build.dependsOn octopusTools
